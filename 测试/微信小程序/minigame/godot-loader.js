GameGlobal.GodotLoader=class{constructor(t,i){this.onScreenCanvas=t,this.offScreenCanvas=document.createElement("canvas"),this.config=i,this.progress=0,this.currentText=i.textConfig.firstStartText,this.backgroundImage=null,this.iconImage=null,this.dpr=window.devicePixelRatio||1,this.initWebGL(),this.loadImages(),this.resizeCanvases(),window.addEventListener("resize",(()=>this.resizeCanvases())),this.render(),this.loadGameEngine()}initWebGL(){if(this.gl=this.onScreenCanvas.getContext("webgl2",{alpha:!1,antialias:!1,depth:!0,enableExtensionsByDefault:1,explicitSwapControl:1,failIfMajorPerformanceCaveat:!1,majorVersion:2,minorVersion:0,powerPreference:"default",premultipliedAlpha:!0,preserveDrawingBuffer:!0,proxyContextToMainThread:0,renderViaOffscreenBackBuffer:!0,stencil:!1}),!this.gl)return void console.error("Unable to initialize WebGL. Your browser may not support it.");const t=this.createShader(this.gl.VERTEX_SHADER,"\n            attribute vec2 a_position;\n            attribute vec2 a_texCoord;\n            varying vec2 v_texCoord;\n            void main() {\n                gl_Position = vec4(a_position, 0, 1);\n                v_texCoord = vec2(a_texCoord.x, 1.0 - a_texCoord.y);\n            }\n        "),i=this.createShader(this.gl.FRAGMENT_SHADER,"\n            precision highp float;\n            uniform sampler2D u_image;\n            varying vec2 v_texCoord;\n            void main() {\n                gl_FragColor = texture2D(u_image, v_texCoord);\n            }\n        ");this.program=this.createProgram(t,i),this.positionLocation=this.gl.getAttribLocation(this.program,"a_position"),this.texCoordLocation=this.gl.getAttribLocation(this.program,"a_texCoord"),this.positionBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),this.gl.STATIC_DRAW),this.texCoordBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.texCoordBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),this.gl.STATIC_DRAW),this.texture=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR)}createShader(t,i){const e=this.gl.createShader(t);return this.gl.shaderSource(e,i),this.gl.compileShader(e),this.gl.getShaderParameter(e,this.gl.COMPILE_STATUS)?e:(console.error("An error occurred compiling the shaders: "+this.gl.getShaderInfoLog(e)),this.gl.deleteShader(e),null)}createProgram(t,i){const e=this.gl.createProgram();return this.gl.attachShader(e,t),this.gl.attachShader(e,i),this.gl.linkProgram(e),this.gl.getProgramParameter(e,this.gl.LINK_STATUS)?e:(console.error("Unable to initialize the shader program: "+this.gl.getProgramInfoLog(e)),null)}loadImages(){this.config.materialConfig.backgroundImage&&(this.backgroundImage=new Image,this.backgroundImage.src=this.config.materialConfig.backgroundImage,this.backgroundImage.onload=()=>this.render()),this.config.materialConfig.iconImage&&(this.iconImage=new Image,this.iconImage.src=this.config.materialConfig.iconImage,this.iconImage.onload=()=>this.render())}resizeCanvases(){const t=window.innerWidth,i=window.innerHeight;this.onScreenCanvas.width=t*this.dpr,this.onScreenCanvas.height=i*this.dpr,this.onScreenCanvas.style.width=`${t}px`,this.onScreenCanvas.style.height=`${i}px`,this.offScreenCanvas.width=t*this.dpr,this.offScreenCanvas.height=i*this.dpr,this.gl.viewport(0,0,this.onScreenCanvas.width,this.onScreenCanvas.height),this.render()}render(){const t=this.offScreenCanvas.getContext("2d"),{width:i,height:e}=this.offScreenCanvas;t.clearRect(0,0,i,e),t.imageSmoothingEnabled=!0,t.imageSmoothingQuality="high",this.backgroundImage&&t.drawImage(this.backgroundImage,0,0,i,e);const r=this.config.barConfig.style,s=this.config.iconConfig.style,h=(i-r.width*this.dpr)/2,o=e-s.bottom*this.dpr-s.height*this.dpr-30*this.dpr-r.height*this.dpr;if(t.fillStyle=r.backgroundColor,this.drawRoundedRect(t,h,o,r.width*this.dpr,r.height*this.dpr,r.borderRadius*this.dpr),this.progress>0){t.fillStyle=r.foregroundColor;const i=Math.max(0,(r.width*this.dpr-2*r.padding*this.dpr)*this.progress);this.drawRoundedRect(t,h+r.padding*this.dpr,o+r.padding*this.dpr,i,r.height*this.dpr-2*r.padding*this.dpr,(r.borderRadius-r.padding)*this.dpr)}const a=this.config.textConfig;if(t.font=a.style.fontSize*this.dpr+"px Arial",t.fillStyle=a.style.color,t.textAlign="center",t.textBaseline="middle",t.fillText(this.currentText,i/2,o+r.height*this.dpr/2),this.config.iconConfig.visible&&this.iconImage){const r=(i-s.width*this.dpr)/2,h=e-s.bottom*this.dpr-s.height*this.dpr;t.drawImage(this.iconImage,r,h,s.width*this.dpr,s.height*this.dpr)}this.renderToWebGL()}drawRoundedRect(t,i,e,r,s,h){r<2*h&&(h=r/2),s<2*h&&(h=s/2),t.beginPath(),t.moveTo(i+h,e),t.arcTo(i+r,e,i+r,e+s,h),t.arcTo(i+r,e+s,i,e+s,h),t.arcTo(i,e+s,i,e,h),t.arcTo(i,e,i+r,e,h),t.closePath(),t.fill()}renderToWebGL(){this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,this.offScreenCanvas),this.gl.useProgram(this.program),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.positionBuffer),this.gl.enableVertexAttribArray(this.positionLocation),this.gl.vertexAttribPointer(this.positionLocation,2,this.gl.FLOAT,!1,0,0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.texCoordBuffer),this.gl.enableVertexAttribArray(this.texCoordLocation),this.gl.vertexAttribPointer(this.texCoordLocation,2,this.gl.FLOAT,!1,0,0),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,4)}updateProgress(t,i){this.progress=t,i&&(this.currentText=i),this.render()}loadGameEngine(){wx.loadSubpackage({complete:t=>{},name:"engine",success:()=>{this.progress=1,this.updateProgress(this.progress,this.config.textConfig.initText)}}).onProgressUpdate((({progress:t})=>{console.log("progress:",t),this.progress=t/100,this.updateProgress(this.progress,this.config.textConfig.downloadingText[0])}))}cleanup(){window.removeEventListener("resize",this.resizeHandler),this.gl.deleteProgram(this.program),this.gl.deleteBuffer(this.positionBuffer),this.gl.deleteBuffer(this.texCoordBuffer),this.gl.deleteTexture(this.texture),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindTexture(this.gl.TEXTURE_2D,null),this.gl.useProgram(null),this.gl.disable(this.gl.BLEND),this.gl.disable(this.gl.DEPTH_TEST),this.gl.disable(this.gl.CULL_FACE),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.clearColor(0,0,0,0),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}};